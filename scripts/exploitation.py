import sys
import os
import glob
import duckdb
import numpy as np



def trusted2exploitation(Objects, distance=10, limit=100):
    # open exploitation database and move all the tables from the trusted zone
    con = duckdb.connect(database = "./data/exploitation/exploitation.db", read_only=False)
    for datasource in Objects:
        id = datasource['id']
        con_trust = duckdb.connect(database = f"data/trusted/db_{id}.db")
        con_trust.execute("EXPORT DATABASE './temp'")
        con_trust.close()
        con.execute(f"IMPORT DATABASE './temp'")
    temp_files = glob.glob('./temp/*')
    for f in temp_files:
        os.remove(f)

    # table with the positions of houses:
    con.execute("CREATE OR REPLACE TABLE pos_house AS SELECT lat, long FROM housing;")

    # normalized maximum distance squared, to use it in the queries:
    distance_transformed = str(( distance / (6371*np.pi/180) )**2 )
    
    # limit clause for sql query (only if limit is a valid value)
    limit_string = " LIMIT "+str(limit) if limit>0 else ""

    # join houses + hospitals
    con.execute(f"""
    create or replace table pos_house_hospital as (
    with H as (SELECT *, long*cos(lat*pi()/180) as long_cos_lat FROM pos_house {limit_string}),
    S as (SELECT X, Y, X*cos(Y*pi()/180) as X_cos_Y, objectid, type, beds, owner from hospitals)
    SELECT
        lat, long,
        count(S.objectid) as num_hospitals,
        sum(S.beds) as num_beds,
        sum(if(S.type='GENERAL ACUTE CARE', 1, 0)) as hospital_type_general,
        sum(if(S.type='CRITICAL ACCESS', 1, 0)) as hospital_type_critical,
        sum(if(S.type='PSYCHIATRIC', 1, 0)) as hospital_type_psychiatric,
        sum(if(S.type='LONG TERM CARE', 1, 0)) as hospital_type_longterm,
        sum(if(S.type='CHILDREN', 1, 0)) as hospital_type_children,
        sum(if(S.owner in('GOVERNMENT - DISTRICT/AUTHORITY', 'GOVERNMENT - FEDERAL',
            'GOVERNMENT - LOCAL', 'GOVERNMENT - STATE'), 1, 0)) as government_hospital,
        sum(if(S.owner = 'NON-PROFIT', 1, 0)) as nonprofit_hospital,
        sum(if(S.owner='PROPRIETARY', 1, 0)) as private_hospital,
        
    FROM H left join S on (
        (H.long_cos_lat - S.X_cos_Y)*(H.long_cos_lat - S.X_cos_Y) + (H.lat - S.Y)*(H.lat - S.Y) < {distance_transformed}
    )
    GROUP BY lat, long
    )
    """).fetchall()

    # join houses + schools

    con.execute(f"""
    create or replace table pos_house_schools as (
    with H as (SELECT *, long*cos(lat*pi()/180) as long_cos_lat FROM pos_house {limit_string}),
    S as (SELECT X, Y, X*cos(Y*pi()/180) as X_cos_Y, OBJECTID, POPULATION, LEVEL_ from schools)
    SELECT
        lat, long,
        count(S.OBJECTID) as num_schools,
        sum(S.POPULATION) as num_students,
        sum(if(S.LEVEL_='preschool', 1, 0)) as preschool,
        sum(if(S.LEVEL_='elementary_school', 1, 0)) as elementary_school,
        sum(if(S.LEVEL_= 'middle_school', 1, 0)) as middle_school,
        sum(if(S.LEVEL_= 'high_school', 1, 0)) as high_school
        
    FROM H left join S on (
        (H.long_cos_lat - S.X_cos_Y)*(H.long_cos_lat - S.X_cos_Y) + (H.lat - S.Y)*(H.lat - S.Y) < {distance_transformed}
    )
    GROUP BY lat, long
    )
    """).fetchall()

    # final join
    con.execute(f"""
    create or replace table houses as (
    with H as (SELECT * FROM housing),
    T1 as (SELECT * from pos_house_hospital),
    T2 as (SELECT * from pos_house_schools)
    SELECT *
    FROM H, T1, T2
    WHERE H.long == T1.long and H.lat == T1.lat
        and T1.long == T2.long and T1.lat == T2.lat
    )
    """).fetchall()

    # close connection
    con.close()
    


if __name__ == "__main__":
    sys.path.append('..')
    sys.path.append('.')
    from helper import *

    setwd()
    Objects = Objects()
    trusted2exploitation(Objects)

